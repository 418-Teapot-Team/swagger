swagger: '2.0'

basePath: /
definitions:
  handler.errorResponse:
    properties:
      message:
        type: string
    type: object
  app.signInInput:
    properties:
      email:
        type: string
        example: 'boryslav.ziubrytskyi@gmail.com'
      password:
        type: string
        example: "qwerty123321"
    required:
      - email
      - password
    type: object
  User:
    properties:
      fullName:
        type: string
        example: 'Boryslav Ziubrytskyi'
      email:
        type: string
        example: 'boryslav.ziubrytskyi@gmail.com'
      password:
        type: string
        example: "qwerty123321"
    required:
      - fullName
      - email
      - password
    type: object

  WhoAmI:
    properties:
      fullName:
        type: string
        example: 'Boryslav Ziubrytskyi'
      email:
        type: string
        example: 'boryslav.ziubrytskyi@gmail.com'
      userId:
        type: string
        example: "7"
    required:
      - email
      - fullName
      - userId
    type: object
  ListInput:
    type: object
    properties:
      type:
        type: string
        enum:
          - income
          - outcome
        example: income
      category:
        type: string
        example: salary
      amount:
        type: number
        format: float
        example: 2000.0
      comment:
        type: string
        example: received bonus
  List:
    type: object
    properties:
      id:
        type: integer
      type:
        type: string
      category:
        type: string
      amount:
        type: number
      comment:
        type: string
      created_at:
        type: string
    example:
      id: 1
      type: expenses
      category: Groceries
      amount: 50.0
      comment: Bought some groceries for the week
      created_at: "2023-05-15T10:30:00Z"
  Token:
    properties:
      token:
        type: string
        example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2ODQyMzY1NzUsImlhdCI6MTY4NDA2Mzc3NSwidXNlcl9pZCI6MX0.M35OqYQp8naY8DckGulHSsjuA4mvCM62qoB6nUDzFmY'
  Currency:
    type: object
    properties:
      code:
        type: string
      officialRate:
        type: string
      darkRate:
        type: string
host: localhost:8081
info:
  contact: { }
  description: API Server for Budget Tracker
  title: Budget Tracker App API
  version: "1.0"
paths:
  /auth/sign-in:
    post:
      consumes:
        - application/json
      description: login
      operationId: login
      parameters:
        - description: credentials
          in: body
          name: input
          required: true
          schema:
            $ref: '#/definitions/app.signInInput'
      produces:
        - application/json
      responses:
        "200":
          description: token
          schema:
            $ref: '#/definitions/Token'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errorResponse'
          examples:
            application/json:
              message: invalid input body
        "404":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errorResponse'
          examples:
            application/json:
              message: not found
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: SignIn
      tags:
        - auth
  /auth/sign-up:
    post:
      consumes:
        - application/json
      description: create account
      operationId: create-account
      parameters:
        - description: account info
          in: body
          name: input
          required: true
          schema:
            $ref: '#/definitions/User'
      produces:
        - application/json
      responses:
        "200":
          description: token
          schema:
            $ref: '#/definitions/handler.errorResponse'
          examples:
            application/json:
              message: Success
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errorResponse'
          examples:
            application/json:
              message: invalid input body
        "419":
          description: Status Conflict
          schema:
            $ref: '#/definitions/handler.errorResponse'
          examples:
            application/json:
              message: user is already exists
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.errorResponse'
          examples:
            application/json:
              message: something gone wrong while trying create user
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: SignUp
      tags:
        - auth
  /api/get-courses:
    get:
      consumes:
        - application/json
      description: get data from goverla and nbu
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          description: Token used for authentication
          required: true
          type: string
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Currency"
            example:
              - code: USD
                officialRate: "36.5686"
                darkRate: "37.77"
              - code: EUR
                officialRate: "39.8287"
                darkRate: "41.35"
              - code: PLN
                officialRate: "8.785"
                darkRate: "9.0"
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.errorResponse'
          examples:
            application/json:
              message: something gone wrong while trying create user
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.errorResponse'

      summary: Get actual courses
      tags:
        - api
  /api/who-am-i:
    get:
      summary: Get data about user
      consumes:
        - application/json
      description: get data about user
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          description: Token used for authentication
          required: true
          type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/WhoAmI'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errorResponse'
          examples:
            application/json:
              message: user not found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.errorResponse'
          examples:
            application/json:
              message: error while trying to get user
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.errorResponse'
      tags:
        - api
  /api/lists/{type}:
    get:
      summary: Get budget list by type
      parameters:
        - name: Authorization
          in: header
          description: Token used for authentication
          required: true
          type: string
        - name: type
          in: path
          description: Type of the budget list to retrieve (can be 'income' and 'expenses') IF type not passed, return all transactions of the user
          type: string
        - name: orderBy
          in: query
          description: Column to sort the results by. Defaults to 'created_at', (two options 'created_at' and 'amount')
          type: string
        - name: reverse
          in: query
          description: If passed true sort the results in ascending order. Defaults to false (descending order)
          type: boolean
      responses:
        '200':
          description: Success response
          schema:
            type: object
            properties:
              result:
                type: array
                items:
                  $ref: '#/definitions/List'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
      tags:
        - api
  /api/lists:
    post:
      summary: Create a new budget list
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          description: Token used for authentication
          required: true
          type: string
        - name: list
          in: body
          description: The list to create
          required: true
          schema:
            $ref: '#/definitions/ListInput'
      responses:
        '200':
          description: Success
        '400':
          description: Invalid input body
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
      tags:
        - api
    delete:
      summary: Delete a budget list by ID
      parameters:
        - name: Authorization
          in: header
          description: Token used for authentication
          required: true
          type: string
        - name: id
          in: body
          description: ID of the list to be deleted
          required: true
          schema:
            type: object
            properties:
              id:
                type: integer
                example: 7
      responses:
        '200':
          description: Success response
          schema:
            type: object
            properties:
              message:
                type: string
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
      tags:
        - api