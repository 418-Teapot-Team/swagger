swagger: "2.0"
basePath: /
definitions:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  handler.errorResponse:
    properties:
      message:
        type: string
    type: object
  app.signInInput:
    properties:
      email:
        type: string
        example: 'boryslav.ziubrytskyi@gmail.com'
      password:
        type: string
        example: "qwerty123321"
    required:
      - email
      - password
    type: object
  User:
    properties:
      fullName:
        type: string
        example: 'Boryslav Ziubrytskyi'
      email:
        type: string
        example: 'boryslav.ziubrytskyi@gmail.com'
      password:
        type: string
        example: "qwerty123321"
    required:
      - fullName
      - email
      - password
    type: object

  FinancialData:
    type: object
    properties:
      date:
        type: string
        format: date
        example: "2022-11-02"
      value:
        type: number
        format: double
        example: 1000
  Category:
    type: object
    properties:
      id:
        type: integer
        description: Category ID
      category:
        type: string
        description: Category name
      hash:
        type: string
        description: Color hash
      imageUrl:
        type: string
        description: Image URL
      type:
        type: string
        description: Category type (income or expenses)
    example:
      id: 1
      category: Food
      hash: "#ff0000"
      imageUrl: "https://example.com/food.png"
      type: expenses

  Account:
    type: object
    properties:
      type:
        type: string
      name:
        type: string
      monthAmount:
        type: integer
        format: int32
      percent:
        type: number
        format: double
      sum:
        type: number
        format: double
      monthPayment:
        type: number
        format: double
      date:
        type: string
        format: date-time
    example:
      type: deposit
      name: Savings Account
      monthAmount: 12
      percent: 3.5
      date: "2023-01-25"
      sum: 5000

  AccountsResponse:
    type: object
    properties:
      result:
        type: array
        items:
          $ref: '#/definitions/Account'
    example:
      result:
        - id: 1
          type: deposit
          name: Savings Account
          monthAmount: 12
          currentMonth: 5
          percent: 3.5
          sum: 5000
          monthPayment: 416.67
          payed: 2083.35
          createdAt: '2022-01-01T00:00:00Z'
        - id: 2
          type: credit
          name: Credit Card
          monthAmount: 24
          currentMonth: 10
          percent: 18.5
          sum: 10000
          monthPayment: 500
          payed: 5000
          createdAt: '2022-06-15T00:00:00Z'
  WhoAmI:
    properties:
      fullName:
        type: string
        example: 'Boryslav Ziubrytskyi'
      email:
        type: string
        example: 'boryslav.ziubrytskyi@gmail.com'
      userId:
        type: string
        example: "7"
    required:
      - email
      - fullName
      - userId
    type: object
  SavingStats:
    properties:
      result:
        type: array
        items:
          type: object
          properties:
            Month:
              type: string
            IncomeNet:
              type: number
        example:
          - Month: '2023-01'
            IncomeNet: 1000
          - Month: '2023-02'
            IncomeNet: -320
    required:
      - Months
      - IncomeNet
    type: object

  ListInput:
    type: object
    properties:
      type:
        type: string
        enum:
          - income
          - outcome
        example: income
      category:
        type: string
        example: salary
      amount:
        type: number
        format: float
        example: 2000.0
      comment:
        type: string
        example: received bonus
  List:
    type: object
    properties:
      id:
        type: integer
      type:
        type: string
      category:
        type: integer
      amount:
        type: number
      comment:
        type: string
      created_at:
        type: string
    example:
      id: 1
      type: expenses
      category: 2
      amount: 50.0
      comment: Bought some groceries for the week
      created_at: "2023-05-15T10:30:00Z"
  Token:
    properties:
      token:
        type: string
        example: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE2ODQyMzY1NzUsImlhdCI6MTY4NDA2Mzc3NSwidXNlcl9pZCI6MX0.M35OqYQp8naY8DckGulHSsjuA4mvCM62qoB6nUDzFmY'
  Currency:
    type: object
    properties:
      code:
        type: string
      officialRate:
        type: string
      darkRate:
        type: string
host: http://13.48.114.197
info:
  contact: { }
  description: |
    This is the API documentation for [Teapot-Budget](http://13.48.114.197/). For more information about Swagger,visit [site](http://swagger.io) or join the discussion on [irc.freenode.net, #swagger](http://swagger.io/irc/).

    ## Introduction
    To use this API, you need to obtain a Bearer token. There are two options to acquire a Bearer token:

    1. Sign in to Teapot-Budget using your email and password.
    2. Make a CRUD operations with incomes, expenses etc.

  title: Budget Tracker App API
  version: "1.0"
paths:
  /auth/sign-in:
    post:
      consumes:
        - application/json
      description: login
      operationId: login
      parameters:
        - description: credentials
          in: body
          name: input
          required: true
          schema:
            $ref: '#/definitions/app.signInInput'
      produces:
        - application/json
      responses:
        "200":
          description: token
          schema:
            $ref: '#/definitions/Token'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errorResponse'
          examples:
            application/json:
              message: invalid input body
        "404":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errorResponse'
          examples:
            application/json:
              message: not found
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: SignIn
      tags:
        - auth
  /auth/sign-up:
    post:
      consumes:
        - application/json
      description: create account
      operationId: create-account
      parameters:
        - description: account info
          in: body
          name: input
          required: true
          schema:
            $ref: '#/definitions/User'
      produces:
        - application/json
      responses:
        "200":
          description: token
          schema:
            $ref: '#/definitions/handler.errorResponse'
          examples:
            application/json:
              message: Success
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errorResponse'
          examples:
            application/json:
              message: invalid input body
        "419":
          description: Status Conflict
          schema:
            $ref: '#/definitions/handler.errorResponse'
          examples:
            application/json:
              message: user is already exists
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.errorResponse'
          examples:
            application/json:
              message: something gone wrong while trying create user
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.errorResponse'
      summary: SignUp
      tags:
        - auth

  /api/get-courses:
    get:
      consumes:
        - application/json
      description: get data from goverla and nbu
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          description: Token used for authentication
          required: true
          type: string
      responses:
        "200":
          description: OK
          schema:
            type: array
            items:
              $ref: "#/definitions/Currency"
            example:
              - code: USD
                officialRate: "36.5686"
                darkRate: "37.77"
              - code: EUR
                officialRate: "39.8287"
                darkRate: "41.35"
              - code: PLN
                officialRate: "8.785"
                darkRate: "9.0"
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.errorResponse'
          examples:
            application/json:
              message: something gone wrong while trying create user
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.errorResponse'

      summary: Get actual courses
      tags:
        - api
      security:
        - bearerAuth: [ ]
  /api/who-am-i:
    get:
      summary: Get data about user
      consumes:
        - application/json
      description: get data about user
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          description: Token used for authentication
          required: true
          type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/WhoAmI'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errorResponse'
          examples:
            application/json:
              message: user not found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.errorResponse'
          examples:
            application/json:
              message: error while trying to get user
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.errorResponse'
      tags:
        - api
      security:
        - bearerAuth: [ ]
  /get-top-categories:
    get:
      summary: Get top categories for income or expenses
      parameters:
        - name: type
          in: query
          description: Type of list (income or expenses)
          required: true
          type: string
          enum:
            - income
            - expenses
      responses:
        200:
          description: Successful operation
          schema:
            type: object
            properties:
              result:
                type: array
                items:
                  $ref: "#/definitions/Category"
      x-examples:
        - name: Example Response
          value:
            result:
              - id: 1
                category: Food
                hash: "#ff0000"
                imageUrl: "https://example.com/food.png"
                type: expenses
      tags:
        - api
      security:
        - bearerAuth: [ ]
  /api/get-stats:
    get:
      summary: Get statistics
      description: Retrieves financial statistics based on budget type, and number of months.
      parameters:
        - name: months
          in: query
          description: Number of months for the statistics
          required: false
          type: integer
        - name: type
          in: query
          description: Budget type (income or expenses)
          required: false
          type: string
      responses:
        "200":
          description: OK
          schema:
            type: object
            properties:
              result:
                type: array
                items:
                  $ref: "#/definitions/FinancialData"
        "400":
          description: Bad Request
        "404":
          description: Not Found
        "500":
          description: Internal Server Error
      tags:
        - api

  /api/lists/{type}:
    get:
      summary: Get budget list by type
      parameters:
        - name: Authorization
          in: header
          description: Token used for authentication
          required: true
          type: string
        - name: type
          in: path
          description: Type of the budget list to retrieve (can be 'income' and 'expenses') IF type not passed, return all transactions of the user
          type: string
        - name: orderBy
          in: query
          description: Column to sort the results by. Defaults to 'created_at', (two options 'created_at' and 'amount')
          type: string
        - name: reverse
          in: query
          description: If passed true sort the results in ascending order. Defaults to false (descending order)
          type: boolean
      responses:
        '200':
          description: Success response
          schema:
            type: object
            properties:
              result:
                type: array
                items:
                  $ref: '#/definitions/List'
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
      tags:
        - lists
      security:
        - bearerAuth: [ ]
  /api/lists/get-saving-stats:
    get:
      summary: Get user savings statistics data
      consumes:
        - application/json
      description: Get user savings statistics data for last year per months
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          description: Token used for authentication
          required: true
          type: string
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/SavingStats'
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errorResponse'
          examples:
            application/json:
              message: user not found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.errorResponse'
          examples:
            application/json:
              message: error while trying to get user
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.errorResponse'
      tags:
        - lists
      security:
        - bearerAuth: [ ]
  /api/lists/current-mon-saved:
    get:
      summary: Get user month savings  value
      consumes:
        - application/json
      description: Get user current month income net
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          description: Token used for authentication
          required: true
          type: string
      responses:
        "200":
          description: OK
          schema:
            type: object
            properties:
              result:
                type: number
                example: 5654
        "400":
          description: Bad Request
          schema:
            $ref: '#/definitions/handler.errorResponse'
          examples:
            application/json:
              message: user not found
        "500":
          description: Internal Server Error
          schema:
            $ref: '#/definitions/handler.errorResponse'
          examples:
            application/json:
              message: error while trying to get user
        default:
          description: ""
          schema:
            $ref: '#/definitions/handler.errorResponse'
      tags:
        - lists
      security:
        - bearerAuth: [ ]

  /api/lists:
    post:
      summary: Create a new budget list
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: Authorization
          in: header
          description: Token used for authentication
          required: true
          type: string
        - name: list
          in: body
          description: The list to create
          required: true
          schema:
            $ref: '#/definitions/ListInput'
      responses:
        '200':
          description: Success
        '400':
          description: Invalid input body
        '401':
          description: Unauthorized
        '500':
          description: Internal Server Error
      tags:
        - lists
      security:
        - bearerAuth: [ ]
    delete:
      summary: Delete a budget list by ID
      parameters:
        - name: Authorization
          in: header
          description: Token used for authentication
          required: true
          type: string
        - name: id
          in: body
          description: ID of the list to be deleted
          required: true
          schema:
            type: object
            properties:
              id:
                type: integer
                example: 7
      responses:
        '200':
          description: Success response
          schema:
            type: object
            properties:
              message:
                type: string
        '400':
          description: Bad request
        '401':
          description: Unauthorized
        '500':
          description: Internal server error
      tags:
        - lists
      security:
        - bearerAuth: [ ]
    put:
      summary: Edit a budget list
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - name: body
          in: body
          required: true
          schema:
            $ref: '#/definitions/List'
      responses:
        '200':
          description: Successful operation
          schema:
            $ref: '#/definitions/List'
        '400':
          description: Bad request
        '500':
          description: Internal server error
      tags:
        - lists
      security:
        - bearerAuth: [ ]
  /api/accounts/{account}:
    get:
      summary: Get all accounts
      parameters:
        - name: account
          in: path
          description: Type of account (deposit or credit)
          required: true
          type: string
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/AccountsResponse'
      tags:
        - accounts
      security:
        - bearerAuth: [ ]
  /api/accounts/:
    post:
      summary: Create an account
      parameters:
        - name: account
          in: body
          description: Account object
          required: true
          schema:
            $ref: '#/definitions/Account'
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              message:
                type: string
      tags:
        - accounts
      security:
        - bearerAuth: [ ]
    put:
      summary: Edit an account
      parameters:
        - name: account
          in: body
          description: Account object
          required: true
          schema:
            $ref: '#/definitions/Account'
      responses:
        200:
          description: OK
          schema:
            $ref: '#/definitions/Account'
      tags:
        - accounts
      security:
        - bearerAuth: [ ]
    delete:
      summary: Delete an account
      parameters:
        - name: id
          in: body
          description: Account ID
          required: true
          schema:
            type: object
            properties:
              id:
                type: integer
                format: int64
            example:
              id: 7
      responses:
        200:
          description: OK
          schema:
            type: object
            properties:
              message:
                type: string
      tags:
        - accounts
      security:
        - bearerAuth: [ ]
  /api/account-total:
    get:
      summary: Retrieve total deposits for the user's account
      responses:
        200:
          description: Successful operation
          schema:
            type: object
            properties:
              payed:
                type: number
                description: Amount paid
                example: 2066.66
              goalSum:
                type: number
                description: Goal sum
                example: 115366.66
      tags:
        - accounts
      security:
        - bearerAuth: [ ]